== TLang Todo


Priorities
==========


Syntax::

[ ]  `path.join` → `(. join path)` ie. "resolve `join` in `path`
[ ]   `(a b c)→(d e)` becomes `(lambda (a b c) d e)`
[ ]  (→ a b)` becomes `(lambda (_ _1 _2) a b)`
[ ]  `key:` for a binding, `:Symbol` for a singleton
[ ] `"*.xml"` for globbing node names

Runtime:

[ ] IDL: Write an IDL description and generate flat buffer structure for the
    data format.
[ ] Primitives:  `seq`, `iter` and `lazy` are all key primitives that support
    deferred and lazy evaluation. We need to find a unified structure 
    (probably the channel) to make this work. This will serve as a building
    block for concurrent 
[ ] (with A O1 O2 O3) -> (O1 A) (O2 A) (O3 A)
[ ] Async

AST:

[ ] expr: not sure about variabls vs ref, vs symbol, should be investigated
Rework::

[x] Naming: I find the AST very verbose (`expr-value-number`), and I primarily
    did that because I wanted an easy way to know if a node is a subset of 
    another. I think it's easier to create groups that we name:
    `(group :Expressions number string computation …)`. There's something
    to be said, though, about the advantage of using prefixes like `type-data-*`,
    as it acts pretty much like namespaces and also makes it possible to
    define groups easily, using the schema. So you could say that `list` is
    actually of type `expr-value-list` and you have that hierarchy in the 
    already.

[ ] TLang: run queries on the command line.
[ ] Expr: expr-value-invocation should actually be expr-list

[ ] Selector: Selector language should be split in selector/processing language

[ ] Capture: should be the name in upper-case {result} → {RESULT}

[ ] Interpreter/Compiler: they're essentially the same, with different
    effects, so we should find a common abstraction.

Design::

[ ] Architecture: define the architecture document so that we have
    a clearer roadmap, implementation-wise.

[ ] Templates: define the priority of query/selectors so that we know
    which ones are going to be selected when matching a template.

[ ] Compiler: the notion of pass (mutates), transform (one way mapping) and projection
    (two way mapping).

[ ] Meta programming: defines ways to rewrite TLang expressions, ie 
    using macros.

[ ] State machines: we'll need to implement state machines for traversal, but
    it might also be interesting to see if how they could be implemented
    using Tlang directly.

[ ] Notifications/event propagation: this really has to be a core language
    feature. Just looking at JavaScript and how it's easy to leak event reactors,
    this really needs to be adressed at the core, along with the bubbling up
    and dispatch mechanism (there could be compile time -- static, and
    dynamic -- at runtime)

[ ] Immutability: at least as a flag, that would ensure some properties about
    the values.

[ ] Errors: it's going to be important to communicate errors properly, and 
    logging is part of it. Maybe logging could be done through a tree through
    which we emit events? That would be nice.

Docs::

[ ] Should be the same font size and "information bandwith" as GitHub. Right
    now it looks smaller and makes pages longer.
[ ] How to denote links (terms, pages) ?
[ ] Some terms are subsets _static(event)_
[ ] Make sure we can create anchors for terms and stuff
[ ] Inko is a nice example: https://inko-lang.org/news/inko-progress-report-september-2019/
[ ] Craftin interpreters is very good: http://craftinginterpreters.com/chunks-of-bytecode.html

Roadmap
=======

API::

[ ]  Implement `Pattern` and `Template`
[ ]  Implement `NodeSet`


Topics
======

Documentation::

[ ] Process .txto into blocks, and parse .tlang into blocks, then
    orgnanize them in pages.
[ ] The schema language should not have model/representation. It's too
    technical.
[ ] Texto: ensure [cross-references] are here
[ ] Script: use texto XML+XSLT to generate the docs, JavaScript to cross reference

Templates::

[ ] Namespace support `ns:node`, for templates

Rules::

[ ] Rule language should work for grammars AND/OR for tree schema.

Tools::

[ ] format: ASCII representation of the tree. See https://github.com/dotnet/coreclr/blob/master/Documentation/botr/ryujit-tutorial.md
[ ] format: dot output
[ ] tlang: options and -vp --verbose-parsing  (with verbose grammar)

New features::

[ ] Indexes: define the notion of an index that can be used to speed up queries.
    See the `richtext-editor` example.

[ ] State: define primitives to define context and slots and refer to them. We
    want to be able to define functions/values and query the contents
    of stuff like schema.

Query::

[ ] A syntax to say "all A that are not nested within an A, from 
    the current node." (what does this even mean?)

Expr::

[ ] Namespaced symbols prefixed with `:` or `*:`
[ ] The … syntax for `(A …B)` and `(A B…)`
[ ] Define a type language (maybe separate)
[ ] Support for `(expr-*)`

Tests::

[ ] Tests: running the rules tests gives unpredictable results, hinting at
    some libparsing issues.
[ ] Should add processor tests to the parser
[ ] Should add parsing speed/throughput and processing speed/throughput

Ideas::

[ ] Find examples where attributes are calculated using `\\` and `//` and
    see how this impacts performance. It's going to be important to identify
    the cases for a good or bad network of attributes.
[ ] Find an example with a loop

Experiments::

[ ] Generate C code, and make sure it's fully instrumented and that memory
    errors are caught.

References
==========

- https://github.com/github/semantic
- https://labs.quansight.org/blog/2019/05/metadsl-dsl-framework/
- https://queue.acm.org/detail.cfm?id=1039534
- https://www.reddit.com/r/nosyntax/wiki/projects
- https://github.com/bazaarvoice/jolt
- https://stackoverflow.com/questions/1618038/xslt-equivalent-for-json
- http://loyc.net/loyc-trees/
- http://dynamicaspects.org/
- http://cell-lang.net/
- [Rosie Pattern Language](https://rosie-lang.org/), which also has a tree output

- Tree diffing: http://thume.ca/2017/06/17/tree-diffing/
http://regent-lang.org/

Functional Programs that Explain their Work
    Roly Perera and Umut A. Acar (Max Planck Institute for Software Systems), James Cheney (University of Edinburgh), and Paul Blain Levy (University of Birmingham)

https://pldi16.sigplan.org/details/pldi-2016-papers/38/Programmatic-and-Direct-Manipulation-Together-at-Last

- https://comby.dev/#basic-usage templates, etc

https://awelonblue.wordpress.com/2018/11/10/hierarchical-transaction-machines/
https://news.ycombinator.com/item?id=21675113
https://github.com/lezer-parser/

# EOF - vim: ts=2 sw=2 et syn=texto

