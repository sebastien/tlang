== TLang Core Library

# TODO: Move to stdlib
Terminology:

- `predicate`
- `effector`
- `consumer`
- `stream`

Notation:

Node and tree
=============

`(tree NODES…)`::

`(attr (NODE_PATTERN ATTR_NAME TYPE?) EXPR…)`::

`(rule NAME:USER_SYMBOL EXPR…)`::

Logic
=====

`(and Value…)`

`(or Value…)`

`(not Value)`

`(true? Value)`

Predicates
==========

`(gt? A:Number B:Number)`

`(gte? A:Number B:Number)`

`(lt? A:Number B:Number)`

`(lte? A:Number B:Number)`

`(always? Value)`::

`(has? Value)`::

Collections
============

`(first EXPR INDEX:Number?)`::

`(last EXPR INDEX:Number?)`::

Streams
=======

`(peek) → Value`::

  Peeks into the stream, returning the next value, if any.

`(consume EFFECTOR?) → Optional[Value]`::

  Returns then ext value, if any and removes it from the stream.

`(consume-maybe PREDICATE EFFECTOR?)`::

  Peeks into the stream using `PREDICATE` and consumes the element
  using `EFFECTOR` if `PREDICATE`  is true.

  Equivalent to `(and (peek PREDICATE) (consume EFFECTOR))`


Schema
======

`(schema EXPR|NODE…)`

`(many NODE…)`

`(any NODE…)`

`(seq NODE…)`

`(maybe NODE…)`

`(transform [PATTERN TEMPLATE]… )`

`(expand [PATTERN TEMPLATE]… )`

Transforms
==========

`(replace NODES:NodeSet Effector:Quoted[Expr])`::

Loggging & Debugging
====================

`(error! EXPR…)`::

`(assert EXPR FAILED:EXPR?)`::

`(repr EXPR…)`::

`(repr-context EXPR… DEPTH:NUMBER?)`::
  
  `DEPTH` defines the scope of the context. A negative value will enclose
  the parent (`-1`) or ancestors (`-2`, `-3`), while a positive value
  denotes the children (`1`) or descendants (`2`, `3`, …).


# EOF - vim: ts=2 sw=2 et syn=texto
