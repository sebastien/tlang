Performance
===========

- Determine as much as possible statically. The compiler should capture as
  much useful information as possible -- except if it's able to unambiguously
  deduce it, in which case the information should not be asked to the user.

- No dynamic operation

- There should be many different node/tree implementations.

- Node implementations should be synthesized using dynamic profiling and fuzzing
  as a data source.

- Minimize the number of passes. Ideally, there should be only one top-bottom 
  and bottom-up required. If there is more, then it means the process leads
  to an unstable tree (which might be OK, as it might converge)

- Traversals build lists that can be re-used and should provide
  fast access. These lists should be reused as much as possible.


Building/compilation
--------------------

Large trees should be serializable so that they can be cached and reused
in a cross-process way. This is especially important an non-interactive case (ie. using make or
some other build  tool), where transformed trees should be reused across projects (being
careful of not to introduce side effects)

VM
--

- Each operation should have a theoeretical cost, and then an actual cost
  using profiling data. The compiler should have an optimizer that constructs
  a program that minimizes the total cost.
