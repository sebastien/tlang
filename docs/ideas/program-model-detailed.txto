== Program Model

NOTE: This in attempt at definition a full program model, from the storage
of data to the type system using a tree representation.

Design principles
=================

`tlang`'s API is defined in an [S-Expression format](https://en.wikipedia.org/wiki/S-expression)
that defines a rich set of primitive to describe type systems that manage how data is encoded,
how types are related with each other, how types can be used, and how usage of types may
affect the program.

The intention behind `tlang` is to provide a building block for programming language and compiler
implementers that makes it easier to express constraints on the program.

Type system
============

The first part of the type system is focused on defining a mapping
between abstract data and its physical representation: in other words, how
data is stored in memory. The type system, at its very basic level, is a way to define
how to read and write data. This is the purpose of the *data encoding* part of the type system.

The second part of the type system is focused on defining equivalences, differences and
similarities between types. If two types both defines a name and an age, but have 
different data encodings for them, maybe there's a way to make them equivalent? This
is the purpose of the *type interface* part of the type system.

The third part of the type system is focused on how different types can be used: maybe
on type has an `email` field that can only be accessed in a specific context. This
is the purpose of the *type capabilities* part of the type system.

The last part of the type system is focused on describing *operations*, or rather
how a specific type might affect the state of a program in response to an operation.
This is the durpose of the *effects* part of the type system.

We are going to use a few specific terms, which are defined here for convenience:

- A _value_ denotes a specific value, like a given number, string, array, etc.
- A _value_ is _concrete_ when it can be represented by a specific encoding of bits
- A _data encoding_ is the way a given _value_ is encoded as bits.
- A _type_ represents a set of possible values. 
- A type is _concrete_ when it has all the information to determine the type
  of values it represents.
- A type is _abstract_ (also called _higher-order_) when it represents a set of
  types, which then might be expanded to a set of values.
- An _operation_ is an action operated on a value of a specific type. The operation
  will affect the state of the program, by producing a value, modifying control
  flow or communicating with another value.
- An _effect_ is the description of the result of an operation, such as producing
  a new value, changing a specific value, changing the control flow, etc.

>>> We should introduce the notion of type data and type interface.

Specifying data encoding
------------------------

### Encoded data size

A data value can be either of `fixed` size or of `variable` size. This is
denoted by `data-size-fixed` constraint.

```
(data-size-fixed BOOL)
(data-size-fixed? TYPE) → BOOL
```

The actual data size of the data, whether fixed or variable can be specified
as. In case of a variable data size, this will set the minimum size of the
data for all values of that type.

```
(data-size NUMBER)
(data-size? TYPE) → NUMBER
```

### Atomic data

Data can be encoded in many different ways. The most obvious one is the mapping
to corresponding low-level C types:

- `U` (prefix) for *unsigned*
- `INT` for *integers*, `FLOAT` for *floating points*
- `CHAR` for *8-bit* ASCII (or other 8-bit encoding) characters.
- `BIT` for *raw bits*
- `{8,16,32,64,128}` for the size (in bits)

```
(data-encoding :UINT64)
(data-encoding? TYPE) → ENCODING
```

Using `data-encoding` automatically implies a corresponding `data-size` for the
type.

### Fixed-size composite data

Data can then be encoded in structures, which are either fixed or dynamic.
Fixed structures have a known length, that won't change along the value's 
lifetime.

The `data-struct` construct defines a contiguous, labeled sequence of 
memory cells.

```
(data-struct SPECIFICATION…)
```

```
(data-struct
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
)
```

which implies

```
;; True, because the length of a structure is the sum of length of its members.
(equals?
	(data-length? _)
	(sum
		(data-length (data-field? _ 0))
		(data-length (data-field? _ 1))
		(data-length (data-field? _ 2))
	)
)
```

Fixed arrays can be specified with the `data-repeat` construct:

```
(data-repeat COUNT SPECIFICATION…)
```

Here's how we would declare an array of 10 floats:

```
(data-repeat 10
	(data-encoding FLOAT64)
))
```

and here's how we would declare an array of 10 of the float triples
declared above:

```
(data-repeat 10
	(data-struct
		(data-encoding FLOAT64)
		(data-encoding FLOAT64)
		(data-encoding FLOAT64)
))
```

You can specify more than one element in the array, in which case
they will each be contiguous. Here is how we would create a columnar
version of the 10 float triples defined above.

```
(data-repeat 10
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
)
```

It is interesting to notice that `(data-struct DATA…)` is strictly
equivalent to `(data-repeat 1 DATA…)`.

### Variable-sized composite data

We've seen how we can define data with a fixed, known size. But what about a 
variable array, or a C string of character. For a start, this set of data types
all imply `(data-size-fixed 0)`, which means their size is not fixed but variable.

The `data-repeat` form can take `*` to denote many elements that might be repeated
next to each other.

```
(data-repeat *
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
)
```

Now, we call a type with a `(data-repeat * ….)` clause _incomplete_, because
it does not contain an explicit way of knowing when it ends. It is incomplete because 
it needs that extra information to know the actual size of one of the values it represents.
Let's take a C string, for instance. A C string is a sequence of characters ending with 0.

```
(data-repeat (data-repeat-end (data-value (data-encoding CHAR) 0)
	(data-encoding CHAR)
)

```

Here we introduce the `data-repeat-end` and `data-value` clauses.

```
(data-repeat-end VALUE)
```

The `data-repeat-end` expects a concrete _value_ used as a sentinel to denote the 
end of the data. This means that the size of the data is _implicit_: it can
be discovered by reading the data up until the sentinel is recognized.

```
(data-value TYPE)
(where (type-concrete? TYPE))
```

The `data-value` clause expands to a concrete series of bits that represent
the encoding of concrete value to be used as a sentinel.

```
(data-repeat (data-repeat-count (data-encoding UINT18))
	(data-encoding CHAR)
)
```

Here we use the `(data-repeat-count DATA)` declaration to denote that the number of 
sequential elements to be repeated is defined in the value encoded as 
an `UINT18`.

This format works the same with a columnar layout

```
(data-repeat (data-repeat-count (data-encoding UINT18))
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
	(data-encoding FLOAT64)
)
```

### Labelling elements

Places within the data can be assigned labels. For instance, if your float
tripe is actually a vector in 3D space Euclidean, you'd consider the triple
to be `(x,y,z)` instead of three anonymous floats.

To do so, you can use the `(data-label DECL)` to wrap a declaration in a label:

```
(data-struct
	(data-label "x" (data-encoding FLOAT64))
	(data-label "y" (data-encoding FLOAT64))
	(data-label "z" (data-encoding FLOAT64))
)
```

### Data conversion and re-encoding

Now we have the basic building blocks to define low level-types: the encoding
primitives of atomic elements (like numbers), and ways to combine then in 
structures of fixed and dynamic size.

The next step is to express how these encodings of data can relate to each
other.  For numbers, we can define the relation of _inclusion_, which says that
*A includes B* if all elements of *B* can be found in *A*. From a data encoding
perspective, this translates into saying "can I re-encode a value of B into a
value of A", which is expressed by the `(data-encodable? B A)` relation:

```
;; True, as all INT8 values sare part of INT32 values
(data-encodable? INT8  INT32) 

;; False, as for instance 256 cannot be represented as an INT8
(data-encodable? INT32 INT8) 

;; False, as you can't convert a negative to an unsigned number 
(data-encodable? UINT32 INT32)
```

Now, let's see if we have two fixed arrays, A and B. We introduce the
`(data-def NAME SPECIFICATION…)` declaration and the `(data-ref NAME)` to
respectively define and reference a specific data specification.

```
(data-def "A"
	(data-repeat 10 (data-encoding UINT8))
)
(data-def "B"
	(data-repeat 10 (data-encoding UINT16))
)
```

we will have

```
;; True, A's content can be re-encoded in B's content, and A and B
;; have the same size.
(data-encodable? (data-ref "A") (data-ref "B"))

;; False, B's content cannot be re-encoded in B's content
(data-encodable? (data-ref "B") (data-ref "A")) ;; False
```

likewise,

```
(data-def "A"
	(data-repeat 5 (data-encoding UINT8))
)
(data-def "B"
	(data-repeat 10 (data-encoding UINT8))
)
```

will yield

```
;; True, A is smaller than B
(data-encodable? (data-ref "A") (data-ref "B"))

 ;; False, B is larger than A
(data-encodable? (data-ref "B") (data-ref "A"))
```

Specifying types
----------------

We've seen how we can define data encodings, from atoms to composite elements,
from fixed sized to variable size, and how we can identify if one can be
converted to the other.

While some values may have strictly the same value encoding, they might not
have the same meaning. Maybe we're using a `FLOAT64` to store the temperature,
but one is in Celcius and the other one in Fahrenheit. Technically, these values
have compatible encodings, but they don't represent the same thing. A `0` celcius
is *not* the same as a `0` Fahrenheit.

This is where having *explicit types* is a good way to denote semantic differences
for stucturally similar types.

## Explicit subtyping

To express this, we define types and define relations between then. We
introduce the `(type-def NAME TYPESPEC…)` directive to define a type,
in a similar way to `(data-def …)`:

```
;; We define an encoding called TEMPARATURE, which is a FLOAT64 atom
(data-def TEMPERATURE (data-encoding FLOAT64))

;; We define two types with that encoding
(type-def Celcius    (type-encoding TEMPERATURE))
(type-def Fahrenheit (type-encoding TEMPERATURE))
```

Now, we've seen that Celcius and Fahrenheit are not the same thing, but
we could at least say that they're numbers -- their interpretation is different,
but they still are essentially the same thing.

```
;; We define a Number type that is encoded as a FLOAT64 value.
(type-def Number
	(type-encoding (data-encoding FLOAT64)))
```

We can explicitly create relations between `Celcius`, `Fahrenheit` and `Number`.
For this, we introduce the `(type-sub CHILD PARENT)` that defines the `CHILD`
type as sub-type of the `PARENT` type.

```
;; We say that Celcius is a subtype of number. This works because both 
;; encodings are compatible:
(type-sub Celcius Number)
(type-sub Fahrenheit Number)
```

This is possible because the following expressions are all true:

```
;; All these are True, because all these type values are encoded
;; as FLOAT64.
(data-encodable? (type-encoding? Celcius)    (type-encoding? Number))
(data-encodable? (type-encoding? Fahrenheit) (type-encoding? Number))
(data-encodable? (type-encoding? Fahrenheit) (type-encoding? Celcius))
(data-encodable? (type-encoding? Celcius)    (type-encoding? Fahrenheit))
```

The `(type-sub? CHILD PARENT)` predicate tests the subtyping relation between
the `CHILD` and the `PARENT`:

```
;; True, as we've defined it
(type-sub? Celcius Number)
(type-sub? Fahrenheit Number)

;; False,  they are siblings.
(type-sub? Celcius Fahrenheit)
```

There's nothing, physically, that prevents us from doing explicitly saying
that `Fahrenheit` is a subtype of `Celcius` and vice-versa

```
(type-sub Fahrenheit Celcius)
(type-sub Celcius Fahrenheit)
```

The only requirement for subtyping is that the parent's encoding can be
re-encoded in the child's encoding. Or in other words, that the parent's data
is a subset of the child's data.

It is interesting to notice here how the parent's data encoding is a subset of
the child's data encoding, while the child's type is subset of the parent's type.

The main reason for that is that we grow data the data from 0 (the more bits, the more possibilities),
while we reduce types from infinity (all the possible value).

# Union Types

Now, what if we said that both `Fahrenheit` and `Celcius` are *temperatures*. 
Based on what we just said, `Fahrenheit` and `Celcius` are now **disjoint**, 
meaning that the following expressions are all false:

```
(type-sub? Fahrenheit Celcius)
(type-sub? Celcius Fahrenheit)
```

The `(type-union NAME TYPE…)` declaration allows us to introduce a `Temperature`
type:

```
(type-union Temperature
	Fahrenheit
	Celcius
)
```

which makes the following expressions true:

```
(type-sub? Fahrenheit Temperature)
(type-sub? Celcius Temperature)
```

note that the `type-union` declaration can take any type, even if they share
no structural equivalence.

# Type capabilities

We've seen so far that types denotes how we can interpret and work with
concrete (encoded) data. There are few key operations that can be applied
to a value:

- Arithmetic operations, denoted by *operators*, some of then being unary (like `-`),
  some of them being binary (like `*`, `/`, …), 

- Data operations, like *access* (reading the value), 
  *assignment* (changing the value), *decomposition* (referencing a subset of the value).

- Program flow operations like *invocation* (which is actually a *jump* and
  a *context nesting* operation).

Note that arithmetic operations are sometimes implemented as method calls
in pure OOP languages, and hence are implemented as invocation instead of 
arithmetic operations.

Let's imagine that our `Temperature` type represents a class of objects with two methods
that produce Fahrenheit and Celcius values.
one to the other:

```
Temperature.toFarhenheit():Fahrenheit
Temperature.toCeclius():Celcius
```

This translates into the following code, using the `(type-slot NAME …)`
declaration to define a *slot* (a symbol that can be operated on), and
the `(capability CAPABILITY)` to denote that the slot can be invoked.

```
(type-slot toFarhenheit
	(type-function :self Fahrenheit)
	(capability :Invocable)
)
```

The `(type-function …)` declaration generates an anonymous type that
converts `:self` (which means the current concrete type) to a `Fahrenheit`.

This declaration makes the following expressions true:

```
(bool (type-slot? Temperature 'toFarhenheit))
(capability? (type-slot? ) :Invocable)
```

We won't go into the details of **capabilities** in this section, but i


# Higher-order types

So far, we've only seen types that are directly expressed. `Fahrenheit`
and `Celcius` are just numbers with different interpretations. But let's imagine
the history of all temperatures, stored as a list. We don't want a list to
only work for `Fahrenheit` or `Celcius`, or  `Temperature` for that matter.

In order to have a list work for anything, we need to define a list type
that can be *configured* to work with a *specific* type. The type that configures 
the list is called the *type parameter* and the list a *parametric type*. Because
the list type can generate an infinite set of concrete types, it is called a higher-order
type: given a parameter, it can generate a *concrete type*. Without any type
parameter, it represents an infinite set of *types*.

```
(type-parametric List (T))
```


# Implicit subtyping

Data encoding: if two types share the same data, then they can be structurally
similar and can be implicit subtypes: the subtyping relation does not have
to be explicitely stated but can be queried:

Likewise, if two types do not have a structurally similar encoding but provide
a structurally similar interface .



# TODO: Structural subtyping
# TODO: Union types
# TODO: Intesection types

To define:

- data
- encoding
- slot
- capability
= type
	- type data
	- type interface
	- concrete type
	- abstract type
	- higher-order type
	- parametric type
	- union type
- subtyping
	- structural subtyping
	- explicit subtyping
	- implicit subtyping
- operation
- object

# EOF - vim: ts=2 sw=2 et syn=texto
