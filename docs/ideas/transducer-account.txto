== Accounting Example

This example shows how to implement the rules for creating a hierarchical
set of accounts, and ensuring that they balance.

```tlang

(schema
	(account
		(@
			(name    :String)
			;; We flag the balance as synthetic
			(balance :Float #synthetic)
		) 
		;; An account can have transaction or account nodes
		(* transaction account)
	)
	(transaction 
		(@ (amount :Float)))
)

;; We define the operation interface, and specify it is
;; incremental.
(interface
  (sum (:List :Float) :Float))

;; We define a synthetic attribute. The balance of an account
;; is the the sum of the all the transactions plus the balance
;; of all its sub-accounts.
(attr schema/@balance
  (sum ./account/@balance â€¦ ./transaction/@amount ))

```

here `sum` must be an incremental operation for it to have an efficient 
implementation. Here is how we'd do it in Python.

```python
from typing import List
class Sum(IncrementalOperation):

	def compute( self, values:List[float] ) -> float:
		return sum(values)

  # NOTE: If we have more than one argument, we would have add_remove
  # for each argument.
	def add( self, current:float, added:List[float] ) -> float:
		reurn current + sum(added)

	def remove( self, current:float, removed:List[float] ) -> float:
		return current - sum(value)

	def clear( self ):
		return 0
```

We can note that in this case, the propagation of data is bottom-up: when
a child is updated, the parent (and ancestors) are also updated.


# EOF - vim: ts=2 sw=2 et syn=texto
