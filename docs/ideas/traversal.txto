== Tree Traversals

One of the goals of [tlang] is to optimize the traversals so N passes can
be composed together without having to do N traversals (or N*2, for top-down
and bottom-up).

See:

- https://drs.is/post/fancy-tree-traversals/
- https://github.com/sinistersnare/robson
- https://cis.temple.edu/~wolfgang/cis551/Week06.pdf


It's important to take into consideration the fact that if a query/traversal
traverses attributes (ie `node/@depends/@depends` we need to make sure not to
traverse the same node twice or we'll loop)

```
;; @attribute
;; A nodes dependencies is the union of its direct dependencies and the
;; dependendencies of 
(attr node/@depends
  ;; NOTE: This might trigger recursive traversals, so we need to 
  ;; make sure TLang is guarded against that.
  (union ./@depends-direct ./@depends-direct/@depends))
```

From [Michael Vollmer - Compiling tree transforms to operate on packed representations](https://www.youtube.com/watch?v=YDa60NpXp6Q),
there is the "cursor passing style", where the tree is a packed array ordered
according to traversal. Overall, packed trees seem like 1/10th of the time (10x
sped increase) vs pointer-based.

# EOF - vim: ts=2 sw=2 et syn=texto
