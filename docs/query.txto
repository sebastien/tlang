== Query Language

# TODO: Recursion selectors. For instance a way to say that
# section//section would only match a section descendant, but not 
# the descendants of the matched section. In othe words, we should
# break the recursion upon match.
# TODO: Conditions on the axes to limit the depth/range

The _query language_ defines a compact language to select nodes and node
sets (lists of nodes) in a tree. The first part of the language is focused
on denoting selections made on a tree, while the second part of the language is
focused on definining expressions (predicates) that allow to dynamically 
refine a selection based on per-node logic.

```
;; Returns the list of all accounts with a least one transaction
;; above 10K
//{account}[transaction/{@amount:V}[(gt? V 10_000)]]
```

TODO:

Subtle difference between `//{node}` implies (for each node) and `{//node}` (all nodes).

The query language uses the [expression language](expr.txto) to bind
values and ally computation. They are both in turn used in the [transform language](transform.txto)
to describe how to transform trees.


Model
===== 

Values::

- _node_: denoted by the `Node` type is a node or leaft within a tree
- _attribute_: denoted by the `Attribute` type has a name and a value
- _node set_: denoted by the `NodeSet` type is an ordered set of nodes
- _subtree_: denoted by `SubTree` is a subset of a tree where nodes don't
  necessarily share a common root and where aribtrary nodes may have been
  removed. A subtree can be considered as a nodeset.

Selection::

Selections are expressions that return a subset of tree (or trees) using
the following properties:

- _axis_: defines in which direction the selection is going (children, siblings,
  ancestors, etc).
- _path_: an expression that determines which nodes/attributes are going to be
  potentially included in the selection
- _constraint_: a predicate that determines wether a node in the path is included
  in the selection.

Selections can be combined using boolean group operations (union, intersection, difference),
and predicates can be combined using boolean logic operations (and, or, not).


Constraint::

	A constraint is the invocation of a function with arguments that
	can be arbitrary values, selections and functions. The constraint
	language is a purely functional typed mini-language.

Production::


	A production is a function that is used to generate the result of
	a selection.

Binding::

	- name
	- value

Values::

	- reference
	- node name
	- node name patteran
	- string litterals
	- numeric litterals


Representation
===============

A query is represented by a **selector**, which is composed of the following 
parts:

- node selectors
- axes
- constraints

aditionnally, selectors also support:

- variable binding, to capture some result in a variable
- template expansion, to expand parts of a selector based on arbitrary
  selection.

An selection is like so:

```
SELECTION? AXIS? NODE_SELECTOR CONSTRAINT?
```

Axes
----

The axes are denoted with the following symbols:


- `/` for children
- `\` for parent
- `>` for next siblings
- `<` for previous siblings

The axes are shallow (single level) unless they are doubled `//`
(descendants), `\\` (ancestors), etc. If the axis is doubled and contains a number, the
number will be used to limit the depth:  `/2/` will look for all the nodes up to 
two levels. 

```query
\\         ;; all ancestors
\2\        ;; parents and grand parents
\*\        ;; grand parents only
```

When not doubled and directly followed by `#N` where `N` is a natural number,
only the `N`-th node of the set will be selected. `./#2` means the second
child of the current node.

Unless prefixed by a selector, an axis starts at the root node of the tree.

```query
/          ;; direct children of the root
./         ;; direct children of the current node
``` 

Parent (`:Node?`) ::

	Selects the parent, returning  a `Node` or `Nothing`

	```
	\                           ;; the current parent
	\node                       ;; the parent if it has the name `node`
	\*\node                     ;; the grand parent with a node name
	\.                          ;; the current node and the parent node
	```

Ancestors (`:NodeSet`)::

	```
	\\                          ;; any ancestor
	\\node                      ;; the ancestors of type `node`
	\\.*                        ;; the current node and any ancestor
	\2\                         ;; the parents and grand parents
	```

Children (`:NodeSet`)::

	```
	/                            ;; The direct children of the root
	./                           ;; The direct children of the currennt node
	./.                          ;; The current node and its direct children
	```

Descendants (`:NodeSet`)::

	```
	//                           ;; The descendants of the root
	.//                          ;; The descendants of the current node
	//.                          ;; The root node and its descendants
	.//.                         ;; The current node and its descendants
	/2/                          ;; The children and grand children of the root
	```

# FIXME: I'm not sure it's the best way to do it. We need something like
# /1/heading -- select all the headings you find anywhere in the document,
# but stop the search one you found one.

Siblings (`:NodeSet`)::

	```
	<                            ;; The previous siblings
	<.                           ;; The current node and previous siblings
	```

	```
	<                            ;; The next siblings
	>.                           ;; The current node and next siblings
	```

	```
	<>                           ;; The previous and next siblings
	<>.                          ;; The current node, previous and next siblings
	```

Subtrees (`:SubTree`)::

	The following indicates all the nodes that come before the current
	node in a depth-first traversal.

	```
	<<                           ;; All previously traversed nodes
	<-<                          ;; All previously traversed nodes of lower level
	<-=<                         ;; All previously traversed nodes of lower or equal level
	<+<                          ;; All previously traversed nodes of deeper level
	<=+<                         ;; All previously traversed nodes of equal or deeper level
	<<.                          ;; The current node and all previously traversed nodes
	```


	The following indicates all the nodes that come after the current
	node in a depth-first traversal.

	```
	>>                           ;; All nodes not yet traversed
	>->                          ;; All nodes yet to traverse with lower depth
	>-=<                         ;; … idem with lower or EQUAL depth
	<+<                          ;; All nodes yet to traverse with higher depth
	<=+<                         ;; … idem with higher or EQUAL depth
	>>.                          ;; The current node and all not yet traversed nodes
	```

	```
	<<>>
	<-<>->
	```

Axes limits
-----------

It is possible to denote limits in the queries, for instance, if you want
to query the predecessors with a depth that is equal or inferior to the current
depth:

```
<[0:.]<
```


Slices
------

Only the parent and grandparent

```
\\[0,1]
```

Query the next 3 siblibgs

```
>[0:3]
```



Special values
--------------

- Current node: `.`
- Parent node: `..`
- Current attribute `@`
- Any node: `*`
- A node with a name that starts with `node-`: `node-*`


Attributes
----------

Attributes can be selected using `@`

Variable binding
----------------

Any expression can be bound to an implicit or explicit variable using
curly braces `{…}`. See the [variables](#variables) section for details
about the strategy.

You can also explicitly bind to a variable using `{…:VAR}` where `VAR` is
your variable name.

Expression substitution
-----------------------

Expressions can have dynamic elements enclosed in `${…}`, in which case
they will be dynamically evaluated. However, be careful because dynamically
evaluated queries cannot be optimized as well (if at all), as all the information
is only known at runtime.

# TODO: Give example

Functions
---------

The selector has strongly typed polymorphic functions.

Position::

- `nth(n:Node)`
- `count(n:NodeSet)`
- `count(t:Tree)`
- `depth(n:Node)`
- `depth(t:Tree)`
- `index(t:Nod)`

Predicates::

- `is()`
- `in(s:NodeSet,n:Node)`
- `has()`
- `not()`
- `eq()`
- `lt()`
- `lte()`
- `gt()`
- `gte()`


Combinators::

- `union(a:NodeSet,b:NodeSet)`
- `difference(a:NodeSet,b:NodeSet)`
- `intersection(a:NodeSet,b:NodeSet)`

Extractors::

- `first(a:NodeSet)`, return the first, or nothing
- `last(a:NodeSet):Node|Nothing`, returns a node, or nothing
- `head(a:NodeSet):Node|Nothing`
- `tail(a:NodeSet):NodeSet`
- `nodes(a:Node):NodeSet`, converts the node to a node set.
- `nodes(a:Tree):NodeSet`, converts all the nodes in the tree to a node-set

Filtering and matching::

- `(filter :Expr)`
- `(match :Expr)`

Introspection

- `(type  :Node)`
- `(type? :Node)`

Debugging

- `assert!`
- `print!`
- `warning!`
- `error!`

Subexpressions
--------------

Any selector expression can be constrained using `[…]`.

```
example[(eq? @type "test")]
```

Variables
---------

Any selection or invocation can be wrapped in a variable binding and 
later user using a variable reference. For instance

```selector
{BEFORE:<*}{AFTER:>*}{SIBLINGS:(union $BEFORE $AFTER)}/
```

Bindings are expressions wrappend in `{…}`, optionally prefixed with
the binding name (in `UPPER_CASE`). Bindings *won't affect the scope*, unless
they are used in a function invocation or suffixed by a path selector.

```selector
{./*}          ;; Implicit binding, bound to A
{CHILDREN:./*} ;; Explicit binding
```

You can simulate a sequential execution by chaining bindings:

```
;; Returns the list of children (it's very contrived!)
;; FIXME: Bad example
{CHILDREN:./*}{//[(in? CHILDREN .)}
```

Constraints
-----------

Constraints can be denoted by wrapping an expression in square brackets
`[CONSTRAINT]`. A constraint can be query or an expression of the expression
language.

```tlang
;; Selects all file nodes with a `path` attribute
file[@path]

;; Same as above, but the node also needs a size attirbute > 100, and the
;; path in captured as variable.
file[{@path}][(> @size 100)]  
``` 

Constraints can be nested, here we capture the paths of all the `dir` nodes
with at least 10 `file` nodes of size > 100.

```tlang
dir[(> (count ./file/[(> size 100) 10))]/{@path}
```

In general, constraints also play the role of sub-selections and allow for
the selection of subtrees as opposed to plain nodesets.

Examples
--------

```tree
(scope
	(define 'a 1)
	(scope
		(if ('> (ref 'a) 0))))
```

The following Selects any `ref` node in the tree, stores the `ref` attribute value as NAME,
and the select any preceding node in the traversal that is a `define`
 node with the `ref` attribute equal to the given `$NAME`. If there is
 no node like that, it means that the reference cannot be resolved.

```selector
.//ref/{NAME:@ref}[empty(.<<define/@ref[eq(@,$NAME)]]
```


References
==========

TLang's query language was inspired by the following languages:

- [XPath]:<https://en.wikipedia.org/wiki/XPath>. XPath is a very powerful and
  complete selection language that is part of the XML/XSLT toolkit. While it's
  relatively popular, it has a few usability issues. 

- [jQuery selectors]:<https://api.jquery.com/category/selectors/>. jQuery
  selectors is a superset of CSS selectors that incorporate some of XPath's
  syntax. It is quite intuitive to pick up, but lacks the advanced capabilities
  of XPath such as axes.

- [treepace]:<https://github.com/sulir/treepace> features a compact and versatile
  selection language, that has the interesting property of being symmetric, ie.
  the  `A < B` and `B > A` both mean "A is a parent of B", which makes
  it possible to write complex selections: `a < b <c>, d`. Treepace also
  introduces the notion of implicit groups that allows for building
  more complex expressions by combingin results.

- [Scheme]: Scheme's macro system.

- https://github.com/tree-sitter/tree-sitter/pull/444

# EOF - vim: ts=2 sw=2 et syn=texto
