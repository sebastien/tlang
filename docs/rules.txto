== Rules

# TODO: Rules language is probably not right
# TODO: Support for context variables (like indentation support)

The _rules language_ provides tools for creating a bi-directional binding
between a text representation and a tree representation. By mapping tokens and subtrees to rules, it becomes possible to convert
trees to and from text format in an expressive way. The rules language is a way
to easily implement parser and code formatters/normalizers.

# SEE: http://www.program-transformation.org/Sdf/SdfLanguage

The grammar definition will look familiar to anyone with experience in writing
parsers or reading
[EBNF](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form). Here
is an example of a very simple computation example, without only the mapping of
tokens to rules:

```rules
NUMBER           := [0-9]+              ;
OPERATOR         := [+\-*/^]            ;
COMPUTATION      := VALUE OPERATOR VALUE;
VALUE(numeric)   := NUMBER              ;
VALUE(composite) := '(' VALUE ')'       ;
```

and here is another example for a simple S-Expression parser that contains
[tree expressions](trees.txto) mapping tokens to subtrees.

```rules
NUMBER(float) := [0-9]+ _ ("." _ [0.9]+)?  --> (number-float (@ (radix A) (mantissa C)));
NUMBER(int)   := [0-9]+                    --> (number-int   (@ (value A)));
STRING        := '"' ('\\"' | [^"])* '"'   --> (string       (@ (value B))); 
SYMBOL        := [A-Za-z\-]+               --> (ref (@ (value A)));
LIST          := "(" VALUE+ ")"            --> (list …VALUE);
VALUE         := (NUMBER | SYMBOL | LIST)  --> A;
```

Model
=====

Each _rule_ defines how (text) tokens can be combined together (like your
traditional grammar), but also provides mapping to a tree from the [tree
language](trees).

Rules have the following properties:

- A rule has a *name*, which represents its type, denoted as an `UPPERCASE` string

- A rule may have a *variant*, which allows rules to have the same name, but
  their `(name,variant)` pair has to be unique. Variants are denoted by a `(lowercase)`
  string in parentheses.

- A rule has a *definition* in the form a sequence of _tokens_ or _rule_ references_ 
  along with _cardinalities_.

A _token_ represents a string or a set of strings (see representation). A rule 
is _terminal_ when its definition only has tokens (ie. it does not reference
any rule).

Representation
==============

A rule has a name and optionally a variant. The definition is rule definition is
declared after `:=` and ends with a semicolon `;`.

```
RULE := 'token';
RULE(variant) := 'another' 'token';
```

Tokens
------

The rule definition can contain tokens, surrounded in double quotes `"…"`. 
Tokens can also reference a range or characters, in which case the range
is surrounded by `[` and `]` with the start and end separted by a `- `:

```rules
A := 'Hello, world!'        ; // 'Hello, world!'
B := [0-9]                  ; // Characters 0 to 9
C := [A-Za-z]               ; // Characters A to Z or a to z
D := [+\-*/^]               ; // Characters '+' '-' '*' '/' or '^'

```


Cardinality
-----------

Cardinalities express how many times an element might be repeated:

- optional is denoted `?`
- one or more is denoted `+`
- zero or more is denoted `*`

By default, elements occur once and only once.

Rule references
---------------

Rule references are denoted in `UPPERCASE` and might be suffixed with 
a _cardinality_. Rules can also be suffixed with `:UPPERCASE_NAME` where
the name will be used to bind the value corresponding to the rule to a variable
that can then be used in a [tree pattern]. Cardinality should always come last.


```rules
COMPUTATION := VALUE:LVALUE? OPERATOR VALUE:RVALUE;
```

Rules also have _implicit references_ which are automatically named with
a combination of uppercase letters. For instance in the following rule

```rules
ASSIGNMENT := 'let' NAME '=' EXPRESSION ';';
```

`NAME` will be implicitly bound to `A`, while `EXPRESSION` will be implicitely
bound to `B`. Literals are not bound to anything, only rule references are.

When the rule references are nested in parens or have cardinalities, then
another letter will be added. For instance:

```
ARRAY :=  '[' (EXPRESSION (',' EXPRESSION)*)? ']'
```

will create the following implicit bindings:

- `A` for `[EXPRESSION, [EXPRESSION]]`
- `AA` for the first `EXPRESSION`
- `AB` for the list of optional `EXPRESSION`
- `ABA` for the first element of the `AB`
- `ABB` for the second element of the `AB`, etc

In other words, the combination of letters becomes an addressing scheme
for implicitely retrieving parts of the parsed tree.


Groups
------

Tokens and rule references can be grouped using parentheses.

```rules
LIST := '(' VALUE? ( ',' VALUE )* ')';
``` 

Choice
------

While you can explicitely define alternative matches for rules using
_variants_, there is an implicit syntax using `|`:

```rules
// matches A, B or C
LETTER := 'A' | 'B' | 'C';
```

which is the equivalent of

```rules
LETTER(A) := 'A';
LETTER(B) := 'B';
LETTER(C) := 'C';
```

Concatenation
-------------

Tokens and rule references are implicitely concatenated, and the default
separator (whitespace) will be used to skip input inbetween the recognized
elements, unless an underscore `_` is specified, in which case the match
must be direct.

```rules
// The following will match `1000.1` but not `1 000 . 1`
FLOAT := [1-9] _ [0-9]* _ '.' _ [0-9]+;
```

Comments
--------

Coments can be placed before or after rule definitions using `//` as a prefix.
Here is a complete, simple example of a grammar definition.

```rules
// A simple expression language
NUMBER           := [0-9]+ ;
OPERATOR         := [+\-*/^] ;
COMPUTATION      := VALUE OPERATOR VALUE;
VALUE(numeric)   := NUMBER;
VALUE(composite) := '(' VALUE ')';
```

Special rules
-------------

There are two special rules in the grammar: `AXIOM` and `SKIP`. The `AXIOM`
rule (if defined) will be the top-level rule that has to be satisfied to
produce a matching parse. The `SKIP` rule will be used to skip input (typically
whitespace) if two tokens cannot be directly matched in sequence.

```rules
AXIOM := MY_AXIOM ;
SKIP  := [ \t\n];
```

Tree pattern templates
----------------------

Now the interesting thing is that a pattern from the [tree language] can
be associated with a rule by following its definition by  `--> PATTTERN;`

```rules
RULE := 'token' --> (token A);
```


In the tree patterns, any `UPPERCASE` string references the matched element
using an implicit naming:

- `A` for the first element, `B` for the second element, etc
- `AA` for the first element of the first match
- `AB` for the second element of the first match
- and so forth

References
==========

- [SDF](http://www.meta-environment.org/doc/books/extraction-transformation/asfsdf-intro/asfsdf-intro.pdf):
  _Syntax Definition Formalism_, has an expressive syntax description backed by
  a language that makes it possible to build parsers and interpeters at the 
  same time.

# TODO: Add an example of operator precendence

# EOF - vim: ts=2 sw=2 et syn=texto
