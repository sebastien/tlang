== Trees

# TODO: Describe the schema

Trees are represented as [S-Expressions], which can also be represented as
JSON and XML using conventions. The tree language is intended for both humans
and machines, and also offers a canoncial representation, as some elements
have shorthands that make them easier to read for humans.

Here is an example:

```example
;; An abstract representation of "hello, world!"
(program
  (let 'text "hello, world!")
  (invoke (resolve 'print) (resolve 'text)))
```

Model
=====

The tree conceptual model is founded on the notion of a _node_. A node is an
element of a tree that has the following properties:

- A node has a **name**, which represents its _node type_, denoted as a string
- A node has zero or more **attributes**, denoted as an ordered list of key-value pairs.
- A node has zero or more **children**
- A node may have one **parent**, if it is a child of another node

- An attribute_ has a *name* and a *value*

A **tree** is a node without parent, a **subtree** is a connected subset of a tree,
a **leaf** is a node without children and a **node set** is a set of nodes that
contains 0 or more nodes.

Representation
==============

A single node is defined like this:

```example
(node-name)         ;; Canonical
node-name           ;; Shorthand
```

Attributes
----------

A single node *with attributes* is defined like this:

```example
(node-name (@ (attribute-1 value) (attribute-1 value)))
```

Node attributes are denoted as a list starting with `@` as the first element,
and followed by `(KEY VALUE)` pairs. Attributes cannot be empty, meaning that
`(node (@))` will fail.

```example
(node (@ (operator +))) ;; The `operator` attribute has value `+`
```

Children
--------

A node *with children* is represented like this:

```example
(node-name (child-1) (child-2) (child-3))    ;; node with children
(node-name
	(@ (attribute-1 value))
	(child-1) (child-2) (child-3))             ;; and attributes
```

Special nodes
-------------

There are three special types of node that have a different notation: the
string, the symbol and the numbers.

The **string** node has as only one child, and its child is not a node but a litteral value,
and is denoted like this:

```example
(string  (@ (value "Hello, world"))) ;; Canonical representation
"Hello, world"                       ;; Shorthand equivalent
```

Likewise for the **number** node:

```example
(number (@ (value 1.0))) ;; Canonical representation
1.0                      ;; Shorthand equivalent
```

and the **symbol** node:

```example
(symbol (@ (value true))) ;; Canonical representation
'true                     ;; Shorthand equivalent
```

Subtyping
---------

A node type `A` is a subtype of a node type `B` when the name of `A` starts
with  `B`. If followed, this simple convention can be quite powerful:

```
(number)
(number-float)        ;; A float is a number
(number-float-32)     ;; A float 32 is a float and a number
(number-integer)      ;; An integer is number but not a float
```

Pattern templates
-----------------

The tree language also has dedicated syntax to support template patterns. 
A template pattern is denoted in `UPPER_CASE` and might be prefixed with
`…` (or `...`):

```example
(list A …B)
```

is a pattern that will create `(list 1 2 3 4)` when given `A=1` and `B=(2 3
4)`. Likewise, if we apply the pattern to `(list 1 2 3 4)`, we will get
`A=1` and `B=(2 3 4)`.

XML & JSON interoperability
===========================

XML mapping
-----------

XML does not inherently have any notion of type: everything is a string. As a
result, attributes have to be specified as children. 

```xml
<node name="NODE_NAME"
  <attr name="ATTR_NAME" TYPE="ATTR_TYPE" value="ATTR_VALUE" />
  …
  <node name="NODE_NAME>…</node>
</node>
```

JSON mapping
------------

JSON mapping is easier as JSON already has rich data types including ordered
map, so the mapping between S-Expr and JSON is more straighforward.

```json
[NODE_NAME, {ATTR_NAME:ATTR_VALUE…}, [NODE_NAME…]…]
```

References
==========

- [treepace](https://github.com/sulir/treepace): a Python library for representing
  and querying tree that informed some of the design decisions made in tlang.

# EOF - vim: ts=2 sw=2 et

