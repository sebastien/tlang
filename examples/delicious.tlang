;; @title Del.icio.us-like bookmarking system

;; @h1 Data model
;; @texto
;; We define a data model with `user`, `tag`, `page` and `bookmark`, where
;; relations betweeen all the elements are defined as synthetic attributes.

(use tlang/schema (schema attr))
(use std (map count))

(schema

  (User
    (@
      (id           :Id)
      (name         :String)
      (email        :Email)
      (shadowPasswd :String)
      (tags         (list tag)  #synthetic)
      (pages        (list page) #synthetic))
    (* bookmark))

  (Tag
    (@
      (id           :Id)
      (name         :String)
      (Users        (list user) #synthetic)
      (pages        (list page) #synthetic)))

  (Page
    (@url
      (bookmarks (list bookmark) #synthetic)
      (Users     (list user)     #synthetic)
      (tags      (list bookmark) #synthetic)))

  (Bookmark
    (@
      (url          :URL)
      (title        :String)
      (description  :String #optional)
      (by           user)
      (tags         (list tag))
      (page         page  #synthetic)))

  (Users
    (* User))

  (Pages
    (* Page))

  (Tags
    (* Tag)))



;; @h2 Synthetic attributes
;; @texto
;; The synthetic attributes are actually indexe that link two elements
;; of the data model. They use the `occurences` function that takes
;; a list of elements and return a map of elements along with their
;; occurences.

(attr user/@tag
  (map count ./bookmark/@tags))

(attr user/@pages
  (map count ./bookmark/@page))

(attr {tag}/@users
  (map count Users/{user}[(in? ./bookmarks/@tags A)]))

(attr {tag}/@pages
  (map count Users/user/bookmark[(in? ./@tags A)]/{@page} ))

(attr {bookmark}/@page
  (map count Pages/{page}[(is? A/@url  B/@url)]))

;; EOF - vim: ts=2 sw=2 et syn=scheme
