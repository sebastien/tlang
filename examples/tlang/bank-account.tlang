;; title: Bank Account Example
;; body
;;   The bank account example shows how to define a basic schema defining
;;   the data model and define transforms that compute values and produce
;;   reports.

(use tlang/schema (schema synthesis attr))
(use tlang/types  (:Id :Date :Number :Label :Currency :Bool))

;; h1: Schema
;; body
;;    The first step is to define a schema for how our data is expressed as
;;    a tree. Nodes can reference other nodes through attributes, and some
;;    attributes can be dynamically computed when markes as `#synthetic`.
(schema

  (Account 
    (@  (id     :Id)
        (label  :Label)
        (parent Account))
    (*  Operation))

  (Ledger
    (@  (id     :Id))
    (?  (accounts    (*  Account)))
    (?  (transaction (*  Transaction))))

  (Transaction
    (@  (id        :Id)
        (date      :Date)
        (amount    :Number)
        (currency  :Currency)
        (from      Account)
        (to        Account)))

  (Operation
    (@  (id        :Id)
        (transaction Transaction)
        (from       :Account)
        (to         :Account)
;; note
;;    The synthetic attributes are derived from the parent
;;    transaction. We'll define how these attributes are computed
;;    in the [synthesis](#) section below.
        (date       :Date     #synthetic)
        (amount     :Number   #synthetic)
        (currency   :Currency #synthetic))))

;; h1: Synthesis
;; body:
;;   This is where we define the attributes that need to be computed dynamically,
;;   based on other parts of the tree.

(synthesis

  (attr Operation/@date
    ; NOTE: This is allowed because we've defined in the schema that 
    ; `@transaction` is a `Transaction`
    @transaction/@date)

  (attr Operation/@amount
    (match @isCredit
      (#true    @transaction/@amount)
      (#false   (- 0 @transaction/amount))))

  (attr Operation/@currency
    @transaction/@date))

;; h1: Transform
;; body
(def accounts-tree
  (namespace o)

  ;; TODO: We want a hierarchical list of accounts with their current 
  ;; balance, maybe from a start and end date.
  (transform /
    (o:Accounts
      (map (Ledger//{Account:A} | sorted ./@label)
        (o:account
          (@
            (o:label    ./@label)
            (o:balance  (
              (minus 
                ;; NOTE: so here we have a very interesting opportunity for
                ;; optimization. 
                ;; 1) We have twice the same/similar query, the only difference
                ;;    being the filtering criteria (to/from). This means that
                ;;    we could do just one traversal instead of two, in 
                ;;    other word, that we *aggregate queries*.
                ;; 2) These two queries are run within a map, but we also
                ;;    know that we're in a transform, so the tree won't change.
                ;;    That means that once we know all the accounts (one traversal),
                ;;    we can execute the predicates on the rest.
                (sum /Ledger/transactions/Transaction/[@to=A/@id]/@amount)
                (sum /Ledger/transactions/Transaction/[@from=A/@id]/@amount)))))))))

;; EOF - vim: ts=2 sw=2 et syn=scheme
