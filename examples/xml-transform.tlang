;; @title Transformation of XML
;; @created 2019-03-11

;; @abstract
;; This example shows how TLang can be used to implement XSLT-like 
;; functionality with a better syntax and more maintainable code.

;; @section imports {collapse}
(import std (cond map apply))
(import tlang/transform (transform stage rule namespace))
(namespace x 'html)

;; @section body
;; @h2 Root transform
;; @texto We start by the top-level rule for transforming the root
(transform #root 
  (x:html
    ;; @texto
    ;; Note how logic expressions don't need to be escaped: it's 
    ;; because the `x:*` namespace is already registered as
    ;; a transform output namespace.
    (cond {title/#text:TITLE}
      (x:head ${TITLE|head|x:title}))
    (cond {./*:CONTENT}
      (x:body
        ${(map CONTENT
          (apply   ))}))))

;; @h2 Table of content
;; @texto; This is what generates a table of content
(stage table-of-content

  (transform #root
    sections)

  ;; @texto
  ;; A rule is named and need to be invoked/applied explicitly, as opposed
  ;; to the transforms  that are applied implicitly.
  (rule 'sections
    (transform {*:SECTION}[/{heading#0:HEADING}]
       (x:li
         (x:a (@ (href {(HEADING|id|format "#{0"}))) {HEADING|text))
        ;; We only add an `ul` if ther are some children
        (cond {sections:CHILDREN}
          (x:ul â€¦CHILDREN))))

;; @hide
;; EOF - vim: ts=2 sw=2 et syn=scheme
