<?xml version="1.0" encoding="UTF-8"?>
# @import blocks!pcss
# @import ff.util.reloading!sjs
<xsl::stylesheet(version="1.0",xmlns::xsl="http://www.w3.org/1999/XSL/Transform")

	# This example shows how to deal with multiple namespaces
	<xsl::output(method=html)

# TODO: XSL Function to write the path of an object
# TODO: Index

# ------------------------------------------------------------------------------
#
# CATALOGUE
#
# ------------------------------------------------------------------------------

	<xsl::template(match="catalogue")
		<html
			<head
				<link(rel=stylesheet,href="lib/css/stylesheet.css")
			<body.catalogue-
				<h1:Catalogue
				<ul.-items-
					<xsl::apply-templates(select="./block/block",mode=catalogue)
				# <h1:Index
				# <ul
				# 	<xsl::apply-templates(select="./block/*",mode=index)
				

	<xsl::template(match="block",mode=catalogue)
		<li.catalogue-block-
			<xsl::attribute(name=data-type)
				<xsl::choose
					<xsl::when(test=@type)
						<xsl::value-of(select="@type")
					<xsl::otherwise
						<xsl::text:folder>
			<div.-header-

				<label.-wrapper
					<xsl::attribute(name=for)
						<xsl::value-of(select="@path")
					<span.-link-
						<xsl::choose
							<xsl::when(test="@type='section'")
								<xsl::attribute(name=data-type)
									<xsl::text:section>
								<xsl::attribute(name=href)
									<xsl::value-of(select=../@path)
									<xsl::text:#>
									<xsl::value-of(select=@id)
							<xsl::otherwise
								<xsl::attribute(name=href)
									<xsl::value-of(select=@path)
						# <xsl::attribute(name=data-ext)
						# 	<xsl::value-of(select=@ext)
						# <xsl::attribute(name=data-path)
						# 	<xsl::value-of(select=@path)
						<xsl::choose
							<xsl::when(test=@label)
								<span.-label
									<xsl::value-of(select=@label)
							<xsl::otherwise
								<span.-filename
									<xsl::value-of(select=@id)
			<xsl::if(test=./*)
				<input.-checkbox(type=checkbox)
					<xsl::attribute(name=id)
						<xsl::value-of(select="@path")
				<ul.-items-
					<xsl::apply-templates(mode=catalogue)



# ------------------------------------------------------------------------------
#
# BLOCK
#
# ------------------------------------------------------------------------------

	<xsl::template(match="block",mode=block)
		<html
			<head
				<link(rel=stylesheet,href="{document/@base}/lib/css/stylesheet.css")
				<title
					<xsl::value-of(select=header/title)
			<body.block
				<xsl::if(test=header)
					<header
						<h1
							<xsl::apply-templates(select=@id)
				<xsl::apply-templates

	<xsl::template(match=symbol,mode=block)
		<span.term
			<xsl::value-of(select=@name)

	<xsl::template(match=heading,mode=block)
		<xsl::if(test=@id)
			<a.anchor
				<xsl::attribute(name=name)
					<xsl::if(test=@id)
		<h1
			<xsl::apply-templates

	<xsl::template(match=text,mode=block)
		<pre
			<xsl::apply-templates

# ------------------------------------------------------------------------------
#
# TABLE OF CONTENT
#
# ------------------------------------------------------------------------------

	<xsl::template(match=section,mode=toc)
		<li.toc-section-
			<a.-label
				<xsl::attribute(name=href)
					<xsl::text:#>
					<xsl::value-of(select=@id)
				<xsl::attribute(name=id)
					<xsl::value-of(select=@id)
				<xsl::value-of(select=title)
			<xsl::if(test=content/section)
				<ul.-children
					<xsl::apply-templates(select=content/section,mode=toc)

	<xsl::template(match=term,mode=toc)
		<li.toc-term-
			<a.-label
				<xsl::attribute(name=href)
					<xsl::text:#>
					<xsl::value-of(select="generate-id(.)")
				# <xsl::attribute(name=id)
				# 	<xsl::value-of(select="generate-id(.)")
				<xsl::value-of(select=.)

# ------------------------------------------------------------------------------
#
# TEXTO
#
# ------------------------------------------------------------------------------

	<xsl::template(match="document")
		<html
			<head
				<link(rel=stylesheet,href="{document/@base}/lib/css/stylesheet.css")
				<title
					<xsl::value-of(select=header/title)
					
			<body.document-
				<div.-page-
					<nav.-catalogue
					<nav.-toc-
						# NOTE: We can't do content/section and //term
						<xsl::if(test="count(content/section)+count(//term)!=0")
							<div.-wrapper
								<xsl::if(test="header/title")
									<h4.toc-title
										<xsl::value-of(select=header/title)
								<xsl::if(test="content/section")
									<div.toc-group
										<h5.toc-group-title(data-name=sections):Sections
										<ul.toc-sections
											<xsl::apply-templates(select=content/section,mode=toc)
								<xsl::if(test="//term")
									<div.toc-group
										<h5.toc-group-title(data-name=terms):Terms
										<ul.toc-terms
											<xsl::apply-templates(select=//term,mode=toc)
					<main.-content
						<xsl::if(test=header)
						<header
							<h1
								<xsl::apply-templates(select=header/title)
						<xsl::apply-templates(select=content)
				<script@raw
					var io = new IntersectionObserver(function(entries){
						for( var i=0 ; i &lt; entries.length ; i++) {
							if (entries[i].isIntersecting){
								var name=entries[i].target.name;
								console.log("IS INTERSECTING",name);
								if (window.location.hash != name){
									// window.history.replaceState(null, null, "#" + name);
									console.log("GOING TO", name);
									break;
								}
							}
						}
					}, {});
					var anchors = document.getElementsByClassName("anchor");
					for( var i=0 ; i &lt; anchors.length ; i++) {io.observe(anchors[i]);}
					

	<xsl::template(match=section)
		<section
			<a.section-anchor
				<xsl::attribute(name=name)
					<xsl::value-of(select=@id)
				<xsl::variable(name=header)
					<xsl::text:h>
					<xsl::value-of(select=@depth)
				<xsl::element(name="{$header}")
					<xsl::apply-templates(select=title)
			<xsl::apply-templates(select=content)

	<xsl::template(match=block)
		<aside.block
			<xsl::attribute(name=data-type)
				<xsl::value-of(select=@type)
			<xsl::apply-templates

	<xsl::template(match=definition-list)
		<dl
			<xsl::apply-templates

	<xsl::template(match=definition-item)
		<dt
			<xsl::apply-templates(select=title)
		<dd
			<xsl::apply-templates(select=content)

	<xsl::template(match=list)
		<ul
			<xsl::apply-templates

	<xsl::template(match=list-item)
		<li
			<xsl::apply-templates

	<xsl::template(match=link)
		# TODO: Suport better references
		<a.link
			<xsl::attribute(name=href)
				<xsl::value-of(select="@target")
			<xsl::apply-templates

	<xsl::template(match=term)
		<a.term-anchor
			<xsl::attribute(name=name)
				<xsl::value-of(select="generate-id(.)")
		<span.term
			<xsl::attribute(name=id)
				<xsl::value-of(select="generate-id(.)")
			<xsl::apply-templates

	<xsl::template(match=strong)
		<strong
			<xsl::apply-templates

	<xsl::template(match=em)
		<em
			<xsl::apply-templates

	<xsl::template(match=pre)
		<pre
			<xsl::if(test=@data-lang)
				<xsl::attribute(name=data-lang)
					<xsl::value-of(select=@data-lang)
			<xsl::apply-templates

	<xsl::template(match=code)
		<code
			<xsl::apply-templates

	<xsl::template(match=p)
		<p
			<xsl::apply-templates
	
# EOF
