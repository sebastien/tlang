<?xml version="1.0" encoding="UTF-8"?>
# @import blocks!pcss
# @import ff.util.reloading!sjs
<xsl::stylesheet(version="1.0",xmlns::xsl="http://www.w3.org/1999/XSL/Transform")

	# This example shows how to deal with multiple namespaces
	<xsl::output(method=html)
# ------------------------------------------------------------------------------
#
# CATALOGUE
#
# ------------------------------------------------------------------------------

	# TODO: Index
	<xsl::template(match="catalogue")
		<html
			<head
				<link(rel=stylesheet,href="lib/css/stylesheet.css")
			<body.catalogue
				<ul
					<xsl::apply-templates(select="./block/*",mode=catalogue)
				<ul
					<xsl::apply-templates(select="./block/*",mode=index)
				

	<xsl::template(match="block",mode=catalogue)
		<li.catalogue-block-
			<a.link
				<xsl::attribute(name=href)
					<xsl::value-of(select=@path)
				<xsl::attribute(name=type)
					<xsl::value-of(select=@ext)
				<xsl::attribute(name=path)
					<xsl::value-of(select=@path)
				<span.-name
					<xsl::value-of(select=@title|@name)
			<xsl::if(test=./*)
				<ul
					<xsl::apply-templates(mode=catalogue)

	<xsl::template(match="definitions",mode=catalogue)
		<li.catalogue-definitions-
			<span.-name
				Definitions:
				<xsl::value-of(select=@name|@id)
			<xsl::if(test=./*)
				<ul
					<xsl::apply-templates(mode=catalogue)

	<xsl::template(match="references",mode=catalogue)
		<li.catalogue-references-
			<span.-name
				References:
				<xsl::value-of(select=@name|@id)
			<xsl::if(test=./*)
				<ul
					<xsl::apply-templates(mode=catalogue)

	<xsl::template(match="symbol",mode=catalogue)
		<code.catalogue-symbol-
			<span.-name
				<xsl::value-of(select=@name|@id)

	<xsl::template(match="definition",mode=catalogue)
		<code.catalogue-definition-
			<span.-name
				<xsl::value-of(select=@name|@id)

	<xsl::template(match=reference,mode="index")

# ------------------------------------------------------------------------------
#
# BLOCK
#
# ------------------------------------------------------------------------------

	<xsl::template(match="block")
		<html
			<head
				<link(rel=stylesheet,href="{document/@base}/lib/css/stylesheet.css")
				<title
					<xsl::value-of(select=header/title)
			<body.block
				<xsl::if(test=header)
					<header
						<h1
							<xsl::apply-templates(select=@id)
				<xsl::apply-templates

	<xsl::template(match=symbol)
		<span.term
			<xsl::value-of(select=@name)

	<xsl::template(match=heading)
		<h1
			<xsl::apply-templates

	<xsl::template(match=text)
		<pre
			<xsl::apply-templates

# ------------------------------------------------------------------------------
#
# TEXTO
#
# ------------------------------------------------------------------------------

	<xsl::template(match="document")
		<html
			<head
				<link(rel=stylesheet,href="{document/@base}/lib/css/stylesheet.css")
				<title
					<xsl::value-of(select=header/title)
			<body.document
				<xsl::if(test=header)
					<header
						<h1
							<xsl::apply-templates(select=header/title)
				<xsl::apply-templates(select=content)

	<xsl::template(match=section)
		<section
			<xsl::variable(name=header)
				<xsl::text:h>
				<xsl::value-of(select=@depth)
			<xsl::element(name="{$header}")
				<xsl::apply-templates(select=title)
			<xsl::apply-templates(select=content)

	<xsl::template(match=definition-list)
		<dl
			<xsl::apply-templates

	<xsl::template(match=definition-item)
		<dt
			<xsl::apply-templates(select=title)
		<dd
			<xsl::apply-templates(select=content)

	<xsl::template(match=list)
		<ul
			<xsl::apply-templates

	<xsl::template(match=list-item)
		<li
			<xsl::apply-templates

	<xsl::template(match=link)
		# TODO: Suport better references
		<a.link
			<xsl::attribute(name=href)
				<xsl::value-of(select="@target")
			<xsl::apply-templates

	<xsl::template(match=term)
		<span.term
			<xsl::apply-templates

	<xsl::template(match=strong)
		<strong
			<xsl::apply-templates

	<xsl::template(match=em)
		<em
			<xsl::apply-templates

	<xsl::template(match=pre)
		<pre
			<xsl::if(test=@data-lang)
				<xsl::attribute(name=data-lang)
					<xsl::value-of(select=@data-lang)
			<xsl::apply-templates

	<xsl::template(match=code)
		<code
			<xsl::apply-templates

	<xsl::template(match=p)
		<p
			<xsl::apply-templates
	
# EOF
