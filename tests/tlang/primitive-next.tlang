(primitive next next? let out)
;; @tdoc:indent spaces=2
;; desc:
;;   The `next` primitive consumes the next element of an iterable
;;   stream. The `next?` primitive peeks into the iterable and tells
;;   if a value is expected to come or not.

(out! "->"  (next (lazy "Hello, world")))

;; expect: A=1
(out! "A=" (next (lazy 1 2 3 4 5)))

;; expect: A=1 B=2 C=2 D=3
(let
  (L (lazy 1 2 3 4 5))
  (out!
    "A=" (next L)
    " B=" (next L)
    " C=" (next L)
    " D=" (next L)))

;; expect: None
(out! (next 1))

;; expect: None
(out! (next (lazy)))

;; expect: False
(out! (next? (lazy)))

;; expect: True
(out! (next? (lazy 1)))

;; expect: 1.0
(out! (next (lazy 1)))

;; EOF - vim: ts=2 sw=2 et
